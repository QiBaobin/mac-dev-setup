# UI
# ─────────────────────────
# relative line numbers
add-highlighter global/ number-lines -relative -hlcursor
# add-highlighter global/ wrap -word
add-highlighter global/ show-matching
# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error
add-highlighter global/ regex \t 0:Error
add-highlighter global/ regex //\h*(TODO:)[^\n]* 0:cyan 1:yellow,red
set-face global InsertCursor default,green+B

# Options
# ─────────────────────────
set-option global tabstop 4
set-option global indentwidth 2
set-option global grepcmd 'rg --vimgrep'
set-option global toolsclient 'client1'
set-option global ctagscmd 'ctags -R --fields=+S --exclude=.git --exclude=build --exclude=.gradle --exclude=.direnv'

# Keys
# ─────────────────────────
map global normal '#' :comment-line<ret>
map global normal <c-a> %{:expr +<ret>} -docstring "Increment by given count"
map global normal <c-x> %{:expr -<ret>} -docstring "Descrement by given count"
map global insert <c-[> <esc>
map global insert <c-h> <backspace>
map global prompt <a-n> '<tab>'
map global prompt <a-p> '<s-tab>'
map global prompt <a-.> '%sh{dirname "$kak_reg_percent"}<a-!>/' -docstring 'Expand to the buffer directory'
map global goto n '<esc>:bn<ret>' -docstring 'next buffer'
map global goto p '<esc>:bp<ret>' -docstring 'previous buffer'
map global goto x '<esc><a-|>open `cat`<ret>' -docstring "Open selection with external program"
map global goto F '<esc>s(?:file://)?([^:\n]+)(?::)?(\d+)(?::)?(\d+)?<ret>:e %reg{1} %reg{2} %reg{3}<ret>' -docstring "Open file in selection"
map global goto D %{<esc>:ctags-search<ret>} -docstring "Goto symbol"
map global goto ` %{<esc>:evaluate-commands "try 'buffer scratchpad' catch 'edit -scratch scratchpad'"<ret>} -docstring "Open the scratchpad"
map global user q %{:write-all-quit<ret>} -docstring "Save and quit"
map global user b %{:buffer } -docstring "Buffer"
map global user d %{:delete-buffer<ret>} -docstring "Delete buffer"
map global user D %{:delete-buffers-match } -docstring "Delete buffers"
map global user f %{:find } -docstring "Find a file"
map global user / %{:grep } -docstring "Grep"
map global user s %{:ctags-search } -docstring "Search symbol"
map global user w :write<ret> -docstring "write the buffer to its file"
map global user : %{:sh } -docstring "Run a shell cmd"
map global user m %{:make build<ret>} -docstring "Run make"
map global user i %{:info -- %sh{ 2>&1}<a-B><left> } -docstring "Show a shell cmd output"
declare-user-mode git
map global user g %{:enter-user-mode git<ret>} -docstring "Enter git mode"
map global git a %{:git add } -docstring "git add"
map global git b %{:git blame<ret>} -docstring "git blame"
map global git c %{:git commit } -docstring "git commit"
map global git d %{:git diff<ret>} -docstring "git diff"
map global git g %{:git grep } -docstring "git grep"
map global git l %{:git log } -docstring "git log"
map global git n %{:git next-hunk<ret>} -docstring "git next-hunk"
map global git p %{:git prev-hunk<ret>} -docstring "git prev-hunk"
map global git r %{:git reset } -docstring "git reset"
map global git s %{:git status<ret>} -docstring "git status"
map global git : %{:sh git } -docstring "git command"
map global git f %{:sh git fetch origin main} -docstring "git fetch"
map global git F %{:sh git pull<ret>} -docstring "git pull"
map global git P %{:sh git push origin @:refs/heads/} -docstring "git push"

# Hooks
# ─────────────────────────
# Swap cursor color in insert mode
hook global ModeChange .*:.*:insert %{
    set-face window PrimaryCursor InsertCursor
    set-face window PrimaryCursorEol InsertCursor
}
hook global ModeChange .*:insert:.* %{ try %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
} }
hook global -always -once BufOpenFifo '\*grep\*' %{
    map global goto / '<esc>:grep-next-match<ret>' -docstring "Go to grep next match"
    map global goto ? '<esc>:grep-next-match<ret>' -docstring "Go to grep previous match"
}
hook global -always BufOpenFifo '\*make\*' %{
    map buffer normal <minus> ': make-next-error<ret>'
}
hook global -always BufWritePost .* %{
    git show-diff
}
hook global BufSetOption filetype=zig %{
    set-option buffer formatcmd 'zig fmt --stdin'
    # use global options to simpify workflow, don't use one session for mulitple projects
    set-option global makecmd 'zig'
    set-option global lintcmd 'zig fmt --check'
    set-option global make_error_pattern "^(?:\w:)?([^:\n]+):(\d+):(?:(\d+):)? (?:fatal )?error:([^\n]+)?"
}
hook global BufSetOption filetype=kotlin %{
    set-option buffer formatcmd 'java -jar ~/bin/ktfmt.jar -'
    set-option global makecmd 'abt -s @'
    set-option global lintcmd 'abt -s @ check'
    # set-option buffer make_error_pattern '(?:e: file://)([^:\n]+):(\d+):(\d+)([^\n]+)?'
    set-option global make_error_pattern '(?:e: file://)([^:\n]+):(\d+):(\d+)([^\n]+)?'
}
hook global ModuleLoaded 'wezterm|tmux|zellij' %{
    set-option global windowing_placement horizontal
    alias global find sk
}
# lsp
declare-option -hidden int lsp_status 0
hook global WinSetOption filetype=(zig|rust|python|kotlin|nix) %{
    eval %sh{
        if [ "$kak_opt_lsp_status" == "0" ] ; then
            if which kak-lsp > /dev/null 2>&1 ; then
                printf '%s;' 'set global lsp_status 1'
                kak-lsp --kakoune -s $kak_session
                printf ';%s' 'set global lsp_status 10'
            else
                printf %s 'set global lsp_status 2; echo "kak-lsp is not installed"'
            fi
        fi
    }
    lsp-enable-window
}
hook global BufSetOption filetype=(zig|rust|python|kotlin|nix) %{
    map buffer user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
    map buffer insert <tab> '<a-;>:lsp-snippets-select-next-placeholders<ret>' -docstring 'Select next snippet placeholder'
    map buffer object f "<a-semicolon>lsp-object Function Method<ret>" -docstring "LSP function or method"
    map buffer object t "<a-semicolon>lsp-object Class Interface Struct<ret>" -docstring "LSP class interface or struct"
    map buffer object d "<a-semicolon>lsp-diagnostic-object --include-warnings<ret>" -docstring "LSP errors and warnings"
    map buffer object D "<a-semicolon>lsp-diagnostic-object<ret>" -docstring "LSP errors"
}
hook global BufSetOption filetype=(zig|rust|python|kotlin) %{
    set-option buffer indentwidth 4
}

# Commands
# ─────────────────────────
define-command mkdir -docstring "" -params .. %{ echo %sh{ mkdir -pv ${@-$(dirname $kak_buffile)} } }
complete-command mkdir file
define-command delete-buffers-match -docstring "Delete all buffers matching giving pattern" -params 1 %{
    evaluate-commands -buffer %sh{
        pattern="$1"; eval set -- "$kak_quoted_buflist"
        bufs=$(for buf in "$@"; do printf "%s\n" "$buf"; done | grep "$pattern" - | tr '\n' ',')
        printf %s "${bufs%,}"
    } delete-buffer
}
complete-command delete-buffers-match buffer

define-command -params 1.. -docstring "run a shell command" sh %{
    evaluate-commands -try-client %opt{toolsclient} %{
        set local makecmd "%val{client_env_SHELL}"
        # set local make_error_pattern  %{^(?:e: )?(?:file://)?([^\n:]+)(?::(\d+))?(?::(\d+))?}
        set global make_error_pattern  %{^(?:e: )?(?:file://)?([^\n:]+)(?::(\d+))?(?::(\d+))?}
        make -c "%arg{@}"
        rename-buffer "%arg{@} %sh{date +'%T'}"
    }
}
complete-command sh shell

define-command -params 1.. -docstring "find files" fd %{
    sh fd -tf %arg{@}
}
alias global find fd

define-command -override -params .. -docstring "find files interactively" sk %{
    set local windowing_placement vertical
    try-terminal %val{client_env_SHELL} -c %exp{ cd %val{client_env_PWD} && sk -m  -c 'fd -tf %arg{@}' | rg -r 'eval -verbatim -try-client %val{client} edit "$0"' '.*' | kak -p %val{session} }
}

define-command -params 1..2 -docstring "expr <operator> [number]" expr %{ execute-keys %sh{
    if [ $kak_count = 0 ]; then kak_count=1; fi
    count=${2-$kak_count}
    printf '|expr `cat` %s %s<ret>' "$1" "${count-1}"
}}

define-command -params 2 -docstring "countdown <title> <time>" countdown %{
    try-terminal sh -c %sh{ printf 'termdown -T "%s" %s && say Time is up' "$1" "$2" }
}

define-command -params 2.. -docstring "try terminal with <windowing_placement> <cmd>" try-terminal %{
    try %{ terminal %arg{@} } catch %{ set local windowing_placement window; terminal %arg{@} }
}
