# UI
# ─────────────────────────
# relative line numbers
add-highlighter global/ number-lines -relative -hlcursor
add-highlighter global/ wrap -word
add-highlighter global/ show-matching
# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error
add-highlighter global/ regex \t 0:Error
add-highlighter global/ regex //\h*(TODO:)[^\n]* 0:cyan 1:yellow,red
add-highlighter global/ dynregex '%reg{/}' 0:+i

# Options
# ─────────────────────────
set-option global tabstop 4
set-option global grepcmd 'rg --column'

# Hooks
# ─────────────────────────
hook global ClientClose .* %{
    delete-buffer *fifo*
    evaluate-commands "nop %sh{ rm -rf /tmp/kak-$kak_client_pid }"
}

# Commands
# ─────────────────────────
define-command mkdir -docstring "" -params .. %{ echo %sh{ mkdir -pv ${@-$(dirname $kak_buffile)} } }
define-command delete-buffers-match -docstring "Delete all buffers matching giving pattern" -params 1 %{
    evaluate-commands -buffer %sh{
        pattern=$1; eval set -- "$kak_quoted_buflist"
        bufs=$(for buf in "$@"; do printf "%s\n" "$buf"; done | grep "$pattern" - | tr '\n' ',')
        printf %s "${bufs%,}"
    } delete-buffer
}
complete-command delete-buffers-match buffer

define-command just -docstring "run just command" -params 1.. %{
    pueue-add just --unstable "%arg{@}"
}
complete-command just shell-script-candidates %{
    if [ $kak_token_to_complete -eq 0 ]; then
        for receipt in $(just --unstable --summary); do echo "$receipt"; done
    fi
}

define-command find -docstring "Find a file to open" -params 1 %{
    edit %arg{@}
}
complete-command find shell-script-candidates %{ fd -tf . . }
define-command edit-match -docstring "Open all files matching giving pattern" -params 1.. %{ evaluate-commands %sh{
    fd -p $@ | sed 's/^/edit /'
}}

# Keys
# ─────────────────────────
map global normal '#' :comment-line<ret>
map global normal <c-a> %{:expr +<ret>} -docstring "Increment by given count"
map global normal <c-x> %{:expr -<ret>} -docstring "Descrement by given count"
map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'
map global prompt <a-.> '%sh(dirname "$kak_buffile")<a-!>/' -docstring 'Expand to the buffer directory'
map global goto n '<esc>:bn<ret>' -docstring 'next buffer'
map global goto p '<esc>:bp<ret>' -docstring 'previous buffer'
map global goto x '<esc><a-|>open `cat`<ret>' -docstring "Open selection with external program"
map global user q %{:write-all-quit<ret>} -docstring "Save and quit"
map global user b %{:buffer } -docstring "Buffer"
map global user d %{:delete-buffer<ret>} -docstring "Delete buffer"
map global user D %{:delete-buffers-match } -docstring "Delete buffers"
map global user f %{:find } -docstring "Find a file"
map global user F %{:edit-match %val{reg_dot}} -docstring "Find files"
map global user / %{:grep %val{reg_dot}} -docstring "Grep"
map global user : %{:pueue-add } -docstring "Run task"
map global user l %{:pueue status ; prompt -init '-f ' 'task ids:' 'fifo pueue log %val{text}'<ret>} -docstring "Task log"
map global user j %{:just } -docstring "Run just command"

# System clipboard handling
# ─────────────────────────

evaluate-commands %sh{
    if [ -n "$SSH_TTY" ]; then
        copy='printf "\033]52;;%s\033\\" $(base64 | tr -d "\n") > $( [ -n "$client_client_pid" ] && echo /proc/$client_client_pid/fd/0 || echo /dev/tty )'
        paste='printf "paste unsupported through ssh"'
        backend="OSC 52"
    else
        case $(uname) in
            Linux)
                if [ -n "$WAYLAND_DISPLAY" ]; then
                    copy="wl-copy -p"; paste="wl-paste -p"; backend=Wayland
                else
                    copy="xclip -i"; paste="xclip -o"; backend=X11
                fi
                ;;
            Darwin)  copy="pbcopy"; paste="pbpaste"; backend=OSX ;;
        esac
    fi
    printf "map global user -docstring 'paste (after) from clipboard' p '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to primary' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to %s primary}<ret>'\n" "$copy" "$backend"
    printf "map global user -docstring 'yank to clipboard' Y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to %s clipboard}<ret>'\n" "$copy -selection clipboard" "$backend"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
    printf "define-command -override echo-to-clipboard -params .. %%{ echo -to-shell-script '%s' -- %%arg{@} }" "$copy"
}

# Helper commands
# ─────────────────────────
define-command -params 1.. -docstring "run pueue commands" pueue %{ info %sh{ pueue $@ }}
complete-command pueue shell-script-candidates %{
    if [ $kak_token_to_complete -eq 0 ]; then
        printf "add\nremove\nrestart\nkill\nstatus\nlog\nclean\nreset\nsend\n"
    fi
}
define-command -params 1.. -docstring "add a task to pueue" pueue-add %{ pueue add -- %arg{@} }
complete-command pueue-add shell

define-command -params 1.. fifo %{ evaluate-commands %sh{
    output="/tmp/kak-${kak_client_pid}/fifo"
    ( mkdir -p $(dirname $output); mkfifo ${output} ) > /dev/null 2>&1
    ( eval "$@" >> ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null
    printf %s\\n "edit! -fifo ${output} '*fifo*'"
}}
complete-command fifo shell

define-command -params 1..2 -docstring "expr <operator> [number]" expr %{ execute-keys %sh{
    if [ $kak_count = 0 ]; then kak_count=1; fi
    count=${2-$kak_count}
    printf '|expr `cat` %s %s<ret>' "$1" "${count-1}"
}}

