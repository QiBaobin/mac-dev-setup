# UI
# ─────────────────────────
# relative line numbers
add-highlighter global/ number-lines -relative -hlcursor
add-highlighter global/ wrap -word
add-highlighter global/ show-matching
# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error
add-highlighter global/ regex //\h*(TODO:)[^\n]* 0:cyan 1:yellow,red
add-highlighter global/ dynregex '%reg{/}' 0:+i

colorscheme tomorrow-night

# Options
# ─────────────────────────
set-option global tabstop 4
set-option global grepcmd 'rg --column'

# Hooks
# ─────────────────────────
hook global WinSetOption filetype=kotlin %[
    set-option window makecmd 'just build'
    set-option window lintcmd 'just build check'
]

# Commands
# ─────────────────────────
define-command mkdir -docstring "" -params .. %{ echo %sh{ mkdir -pv ${@-$(dirname $client_buffile)} } }
# Shortcut to quickly exit the editor
define-command -docstring "save and quit" x "write-all; quit"
define-command -params .. fifo %{ evaluate-commands %sh{
    output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-fifo.XXXXXXXX)/fifo
    mkfifo ${output}
    ( eval "$@" > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null
    printf %s\\n "evaluate-commands -try-client '$client_opt_toolsclient' %{
        edit! -fifo ${output} *fifo-$1*
        hook -always -once buffer BufCloseFifo .* %{ nop %sh{ rm -r $(dirname ${output}) } }
    }"
}}
complete-command fifo shell
define-command shell -docstring "Run commands in a ternimal shell" -params 1.. %{
    terminal %val{client_env_SHELL} -i -c "%arg{@}"
}
complete-command shell shell
define-command delete-buffers-match -docstring "Delete all buffers matching giving pattern" -params 1 %{ evaluate-commands %sh{
    pattern=$1
    eval "set -- $kak_buflist"
    for buf in "$@"; do
        printf "%s\n" "$buf"
    done | rg $pattern - | while read f; do
        printf "delete-buffer '$f'\n"
    done
}}
complete-command delete-buffers-match buffer
define-command edit-match -docstring "Open all files matching giving pattern" -params .. %{ evaluate-commands %sh{
    fd $@ | while read f; do
        printf "edit ""$f""\n"
    done
}}
complete-command edit-match shell-script-candidates %{ fd -tf . . }
define-command window-edit-match -docstring "Open all files matching giving pattern in windows" -params .. %{ evaluate-commands %sh{
    fd $@ | while read f; do
        printf "new edit ""$f""\n"
    done
}}
complete-command window-edit-match shell-script-candidates %{ fd -tf . . }
define-command find -docstring "find files" -params .. %{
    shell fd -tf %arg{@} | sk -m | while read f\; do echo eval -client %val{client} edit """$f""" \; done | kak -p %val{session}
}
complete-command find shell-script-candidates %{ fd -tf . . }
define-command window-find -docstring "find files in other windows" -params .. %{
    shell fd -tf %arg{@} | sk -m | while read f\; do echo eval -client %val{client} new edit """$f""" \; done | kak -p %val{session}
}
complete-command window-find shell-script-candidates %{ fd -tf . . }
define-command just -docstring "run just command" -params 1.. %{
    fifo just --unstable "%arg{@}"
}
complete-command just shell-script-candidates %{ for receipt in $(just --unstable --summary); do echo "$receipt"; done }

# Keys
# ─────────────────────────
map global goto n '<esc>:bn<ret>' -docstring 'next buffer'
map global goto p '<esc>:bp<ret>' -docstring 'previous buffer'
map global goto x %{<a-|>open $(cat)<ret>} -docstring "Open selection with external program"
map global user q %{:x<ret>} -docstring "Save and quit"
map global user c %{:comment-line<ret>} -docstring "Comment line"
map global user b %{:buffer } -docstring "Buffer"
map global user d %{:delete-buffer} -docstring "Delete buffer"
map global user D %{:delete-buffers-match } -docstring "Delete buffers"
map global user f %{:find<ret>} -docstring "Open files"
map global user F %{:edit-match } -docstring "Find files"
map global user w %{:window-find<ret>} -docstring "Open files in windows"
map global user W %{:window-edit-match } -docstring "Find files in windows"
map global user / %{:grep } -docstring "Grep"
map global user < %{:fifo } -docstring "Fifo"
map global user : %{:shell } -docstring "Shell"
map global user s %{:new edit!<ret>} -docstring "Split window"
map global user j %{:just } -docstring "Run just command"

# System clipboard handling
# ─────────────────────────

evaluate-commands %sh{
    if [ -n "$SSH_TTY" ]; then
        copy='printf "\033]52;;%s\033\\" $(base64 | tr -d "\n") > $( [ -n "$client_client_pid" ] && echo /proc/$client_client_pid/fd/0 || echo /dev/tty )'
        paste='printf "paste unsupported through ssh"'
        backend="OSC 52"
    else
        case $(uname) in
            Linux)
                if [ -n "$WAYLAND_DISPLAY" ]; then
                    copy="wl-copy -p"; paste="wl-paste -p"; backend=Wayland
                else
                    copy="xclip -i"; paste="xclip -o"; backend=X11
                fi
                ;;
            Darwin)  copy="pbcopy"; paste="pbpaste"; backend=OSX ;;
        esac
    fi
    printf "map global user -docstring 'paste (after) from clipboard' p '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to primary' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to %s primary}<ret>'\n" "$copy" "$backend"
    printf "map global user -docstring 'yank to clipboard' Y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to %s clipboard}<ret>'\n" "$copy -selection clipboard" "$backend"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
    printf "define-command -override echo-to-clipboard -params .. %%{ echo -to-shell-script '%s' -- %%arg{@} }" "$copy"
}

