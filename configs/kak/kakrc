# UI
# ─────────────────────────
# relative line numbers
add-highlighter global/ number-lines -relative -hlcursor
add-highlighter global/ wrap -word
add-highlighter global/ show-matching
# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error
add-highlighter global/ regex \t 0:Error
add-highlighter global/ regex //\h*(TODO:)[^\n]* 0:cyan 1:yellow,red
add-highlighter global/ dynregex '%reg{/}' 0:+i

# Options
# ─────────────────────────
set-option global tabstop 4
set-option global grepcmd 'rg --vimgrep'

# Commands
# ─────────────────────────
define-command mkdir -docstring "" -params .. %{ echo %sh{ mkdir -pv ${@-$(dirname $kak_buffile)} } }
define-command delete-buffers-match -docstring "Delete all buffers matching giving pattern" -params 1 %{
    evaluate-commands -buffer %sh{
        pattern="$1"; eval set -- "$kak_quoted_buflist"
        bufs=$(for buf in "$@"; do printf "%s\n" "$buf"; done | grep "$pattern" - | tr '\n' ',')
        printf %s "${bufs%,}"
    } delete-buffer
}
complete-command delete-buffers-match buffer

define-command just -docstring "run just command" -params 1.. %{
    pueue-add just --unstable "%arg{@}"
}
complete-command just shell-script-candidates %{
    if [ $kak_token_to_complete -eq 0 ]; then
        for receipt in $(just --unstable --summary); do echo "$receipt"; done
    fi
}

define-command find-completions -params 1 %{
    set-register f %arg{1}
    execute-keys ':find '
}
define-command find -docstring "Find a file to open" -params 1 %{
    edit %arg{@}
}
complete-command find shell-script-candidates %{ fd -tf ${kak_reg_f:-.} . }
define-command find-match -docstring "Open all files matching giving pattern" -params 1.. %{ evaluate-commands %sh{
    file=$(mktemp)
    (fd -tf $@ | sed -e 's/$/:1:0/') > "$file" 2>&1 < /dev/null
    printf %s "grep --no-column -N -I '.*' '$file'"
}}

# Keys
# ─────────────────────────
map global normal '#' :comment-line<ret>
map global normal <c-a> %{:expr +<ret>} -docstring "Increment by given count"
map global normal <c-x> %{:expr -<ret>} -docstring "Descrement by given count"
map global insert <tab> '<c-n>'
map global prompt <a-n> '<tab>'
map global prompt <a-p> '<s-tab>'
map global prompt <a-.> '%sh{dirname "$kak_reg_percent"}<a-!>/' -docstring 'Expand to the buffer directory'
map global goto n '<esc>:bn<ret>' -docstring 'next buffer'
map global goto p '<esc>:bp<ret>' -docstring 'previous buffer'
map global goto x '<esc><a-|>open `cat`<ret>' -docstring "Open selection with external program"
map global user q %{:write-all-quit<ret>} -docstring "Save and quit"
map global user b %{:buffer } -docstring "Buffer"
map global user d %{:delete-buffer<ret>} -docstring "Delete buffer"
map global user D %{:delete-buffers-match } -docstring "Delete buffers"
map global user f %{:prompt -init '.' 'regex:' 'find-completions %val{text}'<ret>} -docstring "Find a file"
map global user F %{:find-match } -docstring "Find files"
map global user / %{:grep } -docstring "Grep"
map global user s %{:ctags-search } -docstring "Search symbol"
map global user : %{:sh } -docstring "Run a shell cmd"
map global user i %{:info %sh{ }<left><left> } -docstring "Show a shell cmd output"
map global user l %{:pueue status ; prompt -init '-f ' 'task ids:' 'sh pueue log %val{text}'<ret>} -docstring "Task log"
map global user j %{:just } -docstring "Run just command"

# Hooks
# ─────────────────────────
hook global -always -once BufOpenFifo '\*grep\*' %{
    map global goto / '<esc>:grep-next-match<ret>' -docstring "Go to grep next match"
    map global goto ? '<esc>:grep-next-match<ret>' -docstring "Go to grep previous match"
}
hook global -always BufOpenFifo '\*make\*' %{
    map buffer normal <minus> ': make-next-error<ret>'
}
hook global WinSetOption filetype=zig %{
    set-option global makecmd 'zig build'
    set-option buffer formatcmd 'zig fmt --stdin'
    set-option global lintcmd 'zig fmt --check src/*.zig'
}

# Helper commands
# ─────────────────────────
define-command -params 1.. -docstring "run pueue commands" pueue %{ info %sh{ pueue $@ }}
complete-command pueue shell-script-candidates %{
    if [ $kak_token_to_complete -eq 0 ]; then
        printf "add\nremove\nrestart\nkill\nstatus\nlog\nclean\nreset\nsend\nparallel\n"
    fi
}
define-command -params 1.. -docstring "add a task to pueue" pueue-add %{ pueue add -- %arg{@} }
complete-command pueue-add shell

define-command -params 1.. -docstring "run a shell command" sh %{
    edit! -scratch *shell-output*
    execute-keys "!%arg{@}<ret>"
}
complete-command sh shell

define-command -params 1..2 -docstring "expr <operator> [number]" expr %{ execute-keys %sh{
    if [ $kak_count = 0 ]; then kak_count=1; fi
    count=${2-$kak_count}
    printf '|expr `cat` %s %s<ret>' "$1" "${count-1}"
}}

