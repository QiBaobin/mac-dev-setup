# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
:: default : yabai -m config window_gap 0
#
# defines a new mode 'yabai' with an on_enter command, that captures keypresses
:: yabai @ : yabai -m config window_gap 20

# default mode
cmd - h : yabai -m window --focus west || yabai -m window --focus east
cmd - l : yabai -m window --focus east || yabai -m window --focus west
cmd - j : yabai -m window --focus south || yabai -m window --focus north
cmd - k : yabai -m window --focus north || yabai -m window --focus south
cmd - o : yabai -m window --focus recent
cmd - e : yabai -m window --toggle split
cmd - 0x2B  : yabai -m display --focus prev || yabai -m display --focus next
cmd - 0x2F  ; yabai

# yabai mode
yabai < return  ; default
yabai < escape  ; default
yabai < h : yabai -m window --focus west
yabai < l : yabai -m window --focus east
yabai < j : yabai -m window --focus south
yabai < k : yabai -m window --focus north
yabai < p : yabai -m window --focus prev
yabai < n : yabai -m window --focus next
yabai < ctrl - h : yabai -m window --warp west
yabai < ctrl - l : yabai -m window --warp east
yabai < ctrl - j : yabai -m window --warp south
yabai < ctrl - k : yabai -m window --warp north
yabai < ctrl - p : yabai -m window --warp prev
yabai < ctrl - n : yabai -m window --warp next
yabai < shift - h : yabai -m window --swap west
yabai < shift - l : yabai -m window --swap east
yabai < shift - j : yabai -m window --swap south
yabai < shift - k : yabai -m window --swap north
yabai < shift - p : yabai -m window --swap prev
yabai < shift - n : yabai -m window --swap next
yabai < alt - h : yabai -m window --resize left:-20:0
yabai < alt - l : yabai -m window --resize right:-20:0
yabai < alt - j : yabai -m window --resize bottom:0:-20
yabai < alt - k : yabai -m window --resize top:0:-20
yabai < 0x2B  : yabai -m display --focus prev || yabai -m display --focus next
yabai < shift - 0x2B  : yabai -m window --display prev || yabai -m window --display prev; yabai -m display --focus next || yabai -m display --focus next
yabai < 0 : yabai -m space --balance
yabai < 1 : yabai -m window --space 1
yabai < 2 : yabai -m window --space 2
yabai < 3 : yabai -m window --space 3
yabai < 4 : yabai -m window --space 4
yabai < 5 : yabai -m window --space 5
yabai < 6 : yabai -m window --space 6
yabai < 7 : yabai -m window --space 7
yabai < 8 : yabai -m window --space 8
yabai < 9 : yabai -m window --space 9

# make floating window fill screen
yabai < up     : yabai -m window --grid 1:1:0:0:1:1 ; skhd -k "escape"

# make floating window fill left-half of screen
yabai < left   : yabai -m window --grid 1:2:0:0:1:1 ; skhd -k "escape"

yabai < i : yabai -m window --insert west ; skhd -k "escape"

# toggle window zoom
yabai < d : yabai -m window --toggle zoom-parent ; skhd -k "escape"
yabai < f : yabai -m window --toggle zoom-fullscreen ; skhd -k "escape"
yabai < s : yabai -m space --layout stack ; skhd -k "escape"
yabai < b : yabai -m space --layout bsp ; skhd -k "escape"

# toggle window split type

# float / unfloat window and center on screen
yabai < t : yabai -m window --toggle float --grid 4:4:1:1:2:2 ; skhd -k "escape"

